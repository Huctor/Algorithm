各个知识点总结:

类型 Two pointers

1) Binary Search

https://leetcode.com/problems/binary-search/submissions/550376882/

数组必须是有序的并检查数组是否为空. 用数组的中间数和target比较, 比target小则在左边区域继续寻找, 比target大则在右边区域继续寻找,
若相等则返回, 否则返回不存在.

时间复杂度 O(logn)
空间复杂度 O(1)

记忆点: 一个while循环, 取中间值操作在while循环中, 因为每次while循环都要选择在左边还是在右边寻找.

2) QuickSort

https://github.com/Huctor/Algorithm/blob/main/TwoPointers/Sort%20an%20Array(QuickSort%2C%20Two%20pointers)

首先检测数组是否为空. 一般采用数组中间数为参照值, 然后在while循环中依次移动左右两个指针, 一个从左边一直移动指针寻找到比参照值大的数(通过while循环), 
一个从右边一直移动指针寻找到比中间值小的数(通过while循环). 寻找到两个值之后交换, 并依次移动左右两个指针. 最后调用两次quicksort函数本身, 分别对数组
做半段和右半段进行quicksort排序.

时间复杂度 O(n)
空间复杂度 O(1)

记忆点: 三个while循环, 取中间值在while循环之外,每次调用函数的时候才需要取中间值, while循环内部只需要移动指针.
函数体内还需要两次再调用函数本身, 依次继续在左右半段继续排序, 直到完成.

3) Two sum 返回数组中两数相加和等于target的下标

https://github.com/Huctor/Algorithm/blob/main/TwoPointers/Two%20sum(Two%20pointers%2C%20Dictionary)

使用字典, 用数组元素的值作为字典的key, 用index作为字典的value.

时间复杂度 O(n)
空间复杂度 O(n)

记忆点: 字典的创建 var dic = [Int:Int]()

4) Sliding windows 返回字符串中最长的非重复部分长度

https://github.com/Huctor/Algorithm/blob/main/TwoPointers/Longest%20Substring%20Without%20Repeating%20Characters(经典滑动窗口问题sliding%20windows)

使用set记录所有滑过的字符. 需要两个指针同向滑动, 外面一个while循环, 左指针不动, 右指针依次移动(同时set添加右指针滑动的字符), 直到碰到重复的字符(set中是否已包含该字符),
然后进入一个内层的while循环, 这个内部的while循环中只移动左指针(set同时移除左指针滑动过的字符), 直到左指针找到和右指针相同的字符, 使用break退出内层while循环(set移除和右指针相同的字符
同时左指针继续移动1个字符). 注意外层while中始终记录右指针和左指针的距离. 如此, 直到右指针移动到字符串末端.

时间复杂度 O(n)
空间复杂度 O(k) k为set的长度

记忆点: 两个while循环(外层为右指针, 内层为左指针), set用作检查重复字符. set的创建var collections = Set<Character>()

5) Fast and slow pointer 判断一个链表是否是一个环

https://github.com/Huctor/Algorithm/blob/main/TwoPointers/Linked%20List%20Cycle(fast%20and%20slow%20pointer)

一个while循环, 慢指针走一步, 快指针走两步, 有重合则证明有环, 没有重合或者快指针的为nil或者快指针的next为nil则证明没有环.

时间复杂度 O(n)
空间复杂度 O(1)

记忆点: 由于是链表, 走一步的和走两步的例子为slow = slow?.next和fast = fast?.next?.next
另外, while循环的退出条件为fast快指针为空或者fast!.next为空, 意为快指针已经走到的链表末端并没有环


类型 LinkedList

1) Reverse Linked List 反转链表

https://github.com/Huctor/Algorithm/blob/main/Exercices/206.%20Reverse%20Linked%20List(Linked%20list)

Iterative解法

流程:
创建一个新链表头部newHead, 从旧链表中取出一个节点插入新链表头部, 然后再将newHead换到头部即可(即将新插入的节点赋值给newHead).
注意这里简单赋值即可, 因为节点插入之后已经存在一个新链表在内存中, 由于都是object, 所以只要更新newHead为最新节点即可, 更新newHead
并不会影响已经在内存中生成的新链表, 只是为了返回需要.

while inputHead != nil{
    var next = inputHead!.next //Line 1
    inputHead!.next = newHead // Line 2
    newHead = inputHead //Line 3
    inputHead = next // Line 4
}

代码思路:
1 首先把旧链表head第二个值取出来备用, 因为之后要循环, 由此而得来Line 1
2 把备用值赋给head, 用来继续循环, 由此得来Line 4
3 把旧链表head添加到新链表头部, 具体做法为把head的next设置为newHead，由此而来Line 2
4 然后更新newHead的值为head, 以保持newHead始终为新链表的头部, 由此而来Line 3

时间复杂度 O(n)
空间复杂度 O(1)

记忆点: 更新头部节点, 只需要简单赋值就好, 不会影响已建立的存在在内存中的新链表

Recursive解法

待补充...


类型 BFS

1) 01 Matrix 给出一个2维矩阵, 返回一个2维矩阵表示出每个非0元素到0的距离

https://leetcode.com/problems/01-matrix/

思路:

先将图中所有0元素的坐标和count(count为0)放入一个queue中, 同时将处理过的过的坐标存入set中.
依次取出queue中元素, 分别向上下左右四个反向寻找非0元素或者未处理过的元素(未在set中的), 如果找到则将坐标以及count加1后存入queue中, 并将新坐标添加入set中

宏观逻辑:

可将01问题看成小岛, 比如0的区域为海水, 1的区域为小岛, 算法思路为从海水向内陆依次进入和加1, 这样就可以得到小岛上每个元素里海水的

时间复杂度 O(mn)
空间复杂度 O(mn)

记忆点: 

创建4个方向 let directions = [[0, 1], [0, -1], [1, 0], [-1, 0]] 
创建2维矩阵, 注意2维矩阵行列的表示方法
var matRow = mat.count
var matCol = mat[0].count
var matCopy = [[Int]](repeating:[Int](repeating: Int.max, count: matCol), count:matRow)

2) Binary Tree Level Order Traversal 二叉树遍历

https://github.com/Huctor/Algorithm/blob/main/BFS/Binary%20Tree%20Level%20Order%20Traversal(BFS)

典型BFS算法模板, 用一个nil来分开每层

时间复杂度 O(n)
空间复杂度 O(n)

记忆点: 记住模板

3) Topological Sorting 拓扑排序

https://github.com/Huctor/Algorithm/blob/main/BFS/Topological%20Sorting(lintcode)

分为两部分: 第一步计算每个点的入度, 第二步把入读为零的点依次取出并减少相邻点的入度直到遍历完

第一步:

创建一个入度字典, 将每个点作为key, 值设为0(假设每个点的入度为0)

遍历每个点的neighbor, 将入度字典中这个neighbor为key的值加1(因为既然这个点是其他点的neighbor, 那么这个点就有一个入度), 计算每个点的真实入度

第二步:

将入度为零的点放入queue中, 在while中依次取出. 由于这点已经取出, 所以for循环这个点的所有neighbor,并将所有neighbor的入度减1(入度字典key为neighbor的值减1),
如果某个neighbor的入度为零, 则将此neighbor放入queue中用于遍历

时间复杂度 O(n+m) n位点数, m为边数
空间复杂度 O(n)

记忆点: 先创建一个入度字典, 计算出所有节点的入度, 再通过依次取出入度为零的节点遍历整张图

类型 DFS

1) Combination Sum 组合

https://github.com/Huctor/Algorithm/blob/main/DFS/Combination%20Sum(DFS%2C%20Recursion)

DFS典型模板

时间复杂度和空间复杂度, 参考 https://leetcode.com/problems/combination-sum/solution/
通常为2^n

记忆点: 数字可以重复使用, 所以没有用set, 记着填进去, 调用dfs后还要取出来

2) Permutations 排列

https://github.com/Huctor/Algorithm/blob/main/DFS/Permutations(DFS%2C%20Recursion)

DFS典型模板

时间复杂度 O(n!)
空间复杂度 O(n!)

记忆点: 数字可以重复使用, 所以使用用set, 记着填进去, 调用dfs后还要取出来

类型 heap top/least K items问题

1) Kth Largest Element in an Array

https://github.com/Huctor/Algorithm/blob/main/Heap/215.%20Kth%20Largest%20Element%20in%20an%20Array

用大堆和小堆这种数据结构来处理, swift中可以使用array的排序来处理

最大堆，所有的父结点都比其子结点要大
最小堆，所有的父结点都比其子结点要小
注意堆的顶部是最先被取出的, 所以求Kth最大用小堆, 求Kth最小用大堆

swift可以使用sort来处理

数组依次递减, 作用相当于最小堆
result.sort{ a, b in
    return a > b
}

数组依次增大, 作用相当于最大堆
result.sort{ a, b in
    return a < b
}

时间复杂度 O(nlogn)
空间复杂度 O(1)

类型 Stack 后进先出

https://github.com/Huctor/Algorithm/blob/main/Stack/20.%20Valid%20Parentheses

创建一个字典, 左半部分符号作为key, 右半部分作为value

如果字符串中的字符为左半部分就添加进stack中, 如果为右半部分, 则要判断stack中的左半部分是否与当前字符为一对,
如果为一对, 则取出stack中最后一个字符, 否则返回false. 循环结束后要半段stack中是否还有值, 有的话则返回错误.

时间复杂度 O(n)
空间复杂度 O(n)

记忆点: 一对字符或者任意形式的成对匹配, 可以考虑采用字典的形式来保证配对.

类型 PrefixTree(字典树)

定义: 每个节点有一个字符和一个bool值, bool值为true则该字母为一个word的结尾字符, 否则为false

首先创建一个节点类TrieNode, 类中包含两个元素: 一个是一个字典用来储存children节点: child节点的值为key, value为TrieNode的对象. 另个一值为bool类型,
默认值为false, 为单词结尾的时候设为true

注意: 节点类TrieNode只需要包含一个children节点的字典即可, 这种方法比较巧妙, 查找子节点存在与否直接用字典搜索key值即可, 如果包含children的所有节点对象,
则需要遍历所有children节点对象, 来判断是否存在.

insert: 从root节点开始, 如果root的的children的key中不包含这个字母, 则创建这个子节点并移动到下一个节点(如果包含, 则直接移动到下一个节点), 知道这个单词的每个字母都成为节点, 最后一个节点的bool设为true,
则一个单词添加完成.

find: 返回input字符串最后一个字符的TrieNode对象, 期间如果某个字母不存在则返回nil

search: 调用find函数, find函数如果返回nil则这个单词不存在, 如果返回TrieNode对象bool值为false, 则这个单词不存在. find函数返回的节点不为空并且bool值为true,
这个单词才存在

startWith: 调用find函数, find函数返回值不会空, 则存在有这个字符串开头的单词.

记忆点: TrieNode类的创建比较巧妙, 用字典的key的值来表示所有children节点的值, 可以借鉴此思路.

类型 UnionFind

https://github.com/Huctor/Algorithm/blob/main/UnionFind/Accounts%20Merge

需要做更多的题来寻找规律, 大致规律如下:

1 将每个节点设置为自己的root父节点.
2 写union函数, 将第一个参数的root父节点设置为第二个参数的root父节点. 用处是将同一组数据的的root节点统一.
3 写find函数, 找到并返回参数的root父节点.

记忆点: 利用字典的特性来合并相容的内容. 注意union函数是两个root节点相互合并(合并分支), find函数找的也是root父节点.

步骤逻辑与例子:  

[
["John","johnsmith@mail.com","john_newyork@mail.com"],
["John","johnsmith@mail.com","john00@mail.com"],
["Mary","mary@mail.com"],
["John","johnnybravo@mail.com"]
]

第一步:

将每个邮箱设为自己的父节点

1 father[johnsmith@mail.com] = johnsmith@mail.com
2 father[john_newyork@mail.com] = john_newyork@mail.com
3 father [johnsmith@mail.com] = johnsmith@mail.com
4 father [john00@mail.com] = john00@mail.com
5 father [mary@mail.com] = mary@mail.com
6 father [johnnybravo@mail.com] = johnnybravo@mail.com

通过这步, 利用字典的特性, 把来自不同email组的相同email合并到一个字典里

1 father[johnsmith@mail.com] = johnsmith@mail.com
2 father[john_newyork@mail.com] = john_newyork@mail.com
3 father [john00@mail.com] = john00@mail.com
4 father [mary@mail.com] = mary@mail.com
5 father [johnnybravo@mail.com] = johnnybravo@mail.com

同时给每个email组里的每个email设置一个联系人并放入一个字典:

1 name[johnsmith@mail.com] = John
2 name[john_newyork@mail.com] = John
3 name [johnsmith@mail.com] = John
4 name [john00@mail.com] = John
5 name [mary@mail.com] = Mary
6 name [johnnybravo@mail.com] = John

通过这步, 利用字典的特性,不同组里的相同email设置为同样的联系人:

1 name[johnsmith@mail.com] = John
2 name[john_newyork@mail.com] = John
3 name [john00@mail.com] = John
4 name [mary@mail.com] = Mary
5 name [johnnybravo@mail.com] = John

第二步:

将email组里的每个email的father设置为第一个email

find function: 找到value的root父节点,  此处有压缩, 意思为直接设置root父节点, 而不是其上一个节点

union function: 将第一个参数的root父节点设置为第二个参数的root父节点

father[john_newyork@mail.com] = johnsmith@mail.com


第三步:

组件新的字典dic, key为root父节点, value为此父节点下的所有子节点

另外,  此处有find函数例子 :

father[johnsmith@mail.com] is johnsmith@mail.com
value is johnsmith@mail.com

第四步:

通过name字典和dic字典组成答案

以上例子过于简单, 改为一下例子将出现合并两个分支的情况:

[
["John"," john_newyork@mail.com", "johnsmith@mail.com "],
["John"," john00@mail.com", "johnsmith@mail.com "],
["Mary","mary@mail.com"],
["John","johnnybravo@mail.com"]
]






































































