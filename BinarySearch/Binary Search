https://leetcode.com/problems/binary-search/

Solution 1:

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        if not nums:
            return -1
        
        start, end = 0, len(nums) - 1
        
        while start + 1 < end:
            
            mid = (start + end) // 2
            
            if nums[mid] < target:
                start = mid
            elif nums[mid] > target:
                end = mid
            else:
                return mid
        
        if nums[start] == target:
            return start
        if nums[end] == target:
            return end
        
        return -1
        
Solution 2:

class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        if not nums:
            return -1
        
        start, end = 0, len(nums) - 1
        
        index = -1
        
        while start <= end:
            
            mid = (start + end) // 2
            
            if nums[mid] < target:
                start = mid + 1
            elif nums[mid] > target:
                end = mid - 1
            else:
                index = mid
                break
        
        return index
        
 Solution 3 (standard):
 
 class Solution:
    def search(self, nums: List[int], target: int) -> int:
        
        if not nums:
            return -1
        
        start, end = 0, len(nums) - 1
        
        while start <= end:
            
            mid = (start + end) // 2
            
            if nums[mid] < target:
                start = mid + 1
            elif nums[mid] > target:
                end = mid - 1
            else:
                return mid
        
        return -1
        

Solution: Swift

class Solution {
    func search(_ nums: [Int], _ target: Int) -> Int {
        
        if nums.count == 0{
            return -1
        }
        
        var start = 0
        var end = nums.count - 1
        
        while start <= end{
            
            var mid = (start + end) / 2
            
            if nums[mid] < target{
                start = mid + 1
            }else if nums[mid] > target{
                end = mid - 1
            }else{
                return mid
            }
        }
        
        return -1
        
    }
}
