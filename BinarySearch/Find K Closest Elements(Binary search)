https://leetcode.com/problems/find-k-closest-elements/

因为给出的input是有序的，所以用binary search可以找到给出x的位置，或者离x最近的数的位置(通过target离左右指针的距离决定返回left还是right，返回距离近的)。
然后再循环k次找出k个数字。注意边界条件的的处理left < 0时，返回false则有指针向右移，当right >=数组长度时，则返回true，左指针向左移。


Solution:

class Solution:
    def findClosestElements(self, arr: List[int], k: int, x: int) -> List[int]:
        
        if not arr:
            return []
        
        if len(arr) < 2:
            return arr
        
        num = self.binarySearch(arr, x)
        
        left = num
        right = num + 1
        result = []
        
        for _ in range(k):
            if self.isCloser(arr, left, right, x):
                result.append(arr[left])
                left -= 1
            else:
                result.append(arr[right])
                right += 1            
        
        result.sort()
        
        return result       
        
    def binarySearch(self, arr: List[int], target: int) -> int:
        
        if not arr:
            return []
        
        left, right = 0, len(arr) - 1
        
        while left + 1 < right:
            
            mid = (left + right) // 2
            
            if arr[mid] < target:
                left = mid
            elif arr[mid] > target:
                right = mid
            else:
                return mid
        
        if target - arr[left] < arr[right] - target:
            return left
        elif target - arr[left] > arr[right] - target:
            return right
        else:
            return left
    
    def isCloser(self, arr: List[int], left: int, right: int, target: int) -> bool:
        
        if left < 0:
            return False
        
        if right >= len(arr):
            return True
        
        return target - arr[left] <= arr[right] - target
        
