https://leetcode.com/problems/combination-sum/

Solution:

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        
        if not candidates:
            return []
        
        results = []
        
        newCandidates = sorted(list(set(candidates)))
        
        self.dfs(newCandidates, 0, [], target, results)
        
        return results
        
    def dfs(self, newCandidates: List[int], index: int, current_result : List[int], remain_target: int, results: List[int]):
        
        if remain_target == 0:
            results.append(list(current_result))
            return results
        
        for i in range(index, len(newCandidates)):
            
            if remain_target < newCandidates[i]:
                break;
                
            current_result.append(newCandidates[i])
            
            self.dfs(newCandidates, i, current_result, remain_target - newCandidates[i], results)
            
            current_result.pop()
    
