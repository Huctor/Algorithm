https://leetcode.com/problems/course-schedule-ii/

Solution: 主要使用bfs topological sorting解决问题，然后添加不同的条件运行所有的cases

class Solution:
    def findOrder(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        
        if not prerequisites and numCourses == 1:
            return [0]
        
        if not prerequisites:
            newlist = list(range(numCourses))
            newlist.reverse()
            return newlist
        
        numbers = set()
        for x, y in prerequisites:
            if x not in numbers:
                numbers.add(x)
            if y not in numbers:
                numbers.add(y)
        
        if len(numbers) == numCourses:
            results = self.getCourses(numCourses, prerequisites)
            
        if len(numbers) < numCourses:
            results = self.getCourses(len(numbers), prerequisites)
            if not results:
                return results
            headList = []
            for i in list(range(numCourses)):
                if i not in numbers:
                    headList.append(i)
            headList.sort()
            headList.reverse()
            results = headList[0 : numCourses - len(numbers)] + results
        
        return results 
                
    def getCourses(self, numCourses: int, prerequisites: List[List[int]]) -> List[int]:
        
        numbers = set()
        dic = {}
        dicIndegree = {}
        queue = collections.deque()
        results = []
        for x, y in prerequisites:
            if x not in numbers:
                numbers.add(x)
            if y not in numbers:
                numbers.add(y)
                
            if y in dic:
                dic[y].append(x)              
            if y not in dic:
                dic[y] = [x]
            
            if x in dicIndegree:
                dicIndegree[x].append(y)              
            if x not in dicIndegree:
                dicIndegree[x] = [y]
        
        for n in numbers:
            if n not in dicIndegree:
                queue.append(n)
                while queue:            
                    value = queue.popleft()
                    if value not in results:
                        results.append(value)
                        if len(results) == numCourses:
                            return results
                    if value not in dic:
                        continue
                    
                    for x in dic[value]:
                        
                        if x not in dicIndegree:
                            continue
                        
                        if len(dicIndegree[x]) == 0:
                            if x not in results:
                                results.append(x)
                                queue.append(x)
                            if len(results) == numCourses:
                                return results
                        else: 
                            dicIndegree[x].remove(value)
                            if len(dicIndegree[x]) == 0:
                                queue.append(x)
                        
        return []   
