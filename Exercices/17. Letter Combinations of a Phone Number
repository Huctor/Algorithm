https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/

1. DFS Solution:

class Solution {

    let dic: [Character:[Character]] = [
        "2": ["a", "b", "c"],
        "3": ["d", "e", "f"],
        "4": ["g", "h", "i"],
        "5": ["j", "k", "l"],
        "6": ["m", "n", "o"],
        "7": ["p", "q", "r", "s"],
        "8": ["t", "u", "v"],
        "9": ["w", "x", "y", "z"],
    ]

    func letterCombinations(_ digits: String) -> [String] {

        if digits.isEmpty{
            return []
        }
             
        var res = [String]()
        var currentPath = [Character]()
        dfs(&res, &currentPath, 0, Array(digits))

        return res
    }

    func dfs(_ res:inout [String], _ currentPath: inout [Character], _ count: Int, _ digits: [Character]){

        if currentPath.count == digits.count{
            res.append(String(currentPath))
            return
        }

        if let dicLetters = dic[digits[count]]{
            for item in dicLetters{
                currentPath.append(item)
                dfs(&res, &currentPath, count + 1, digits)
                currentPath.removeLast()
        }
        }
    }
}

2. BFS Solution:
