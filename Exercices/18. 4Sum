https://leetcode.com/problems/4sum/

class Solution {

    func fourSum(_ nums: [Int], _ target: Int) -> [[Int]] {
        
        var newNums = nums;
        newNums.sort{ a, b in
            return a < b
        }

        var result = [[Int]]()
        var current = [Int]()
            
        kSum(4, 0, target, newNums, &current, &result)
        
        return result
    }

    func kSum(_ k: Int, _ start: Int, _ target: Int, _ nums: [Int], _ current: inout [Int], _ res: inout [[Int]]){
        
        if k != 2{
            for i in start..<nums.count{ //注意这个for循环, 从左到右从数组中选取k个元素
                if i > start && nums[i] == nums[i-1]{
                    continue
                }
                current.append(nums[i])
                kSum(k-1, i+1, target - nums[i], nums, &current, &res)
                current.removeLast()
            }
            return
        }

        //Two sum: 从数组中选取两个和为target中的不重复元素的不重复组合
        var left = start
        var right = nums.count-1

        while left < right{

            if nums[left] + nums[right] > target{
                right -= 1
            }else if nums[left] + nums[right] < target{
                left += 1
            }else{
                current.append(nums[left])
                current.append(nums[right])
                res.append(current)
                current.removeLast()
                current.removeLast()
                left += 1
                while left < right && nums[left] == nums[left-1] {
                    left += 1
                }
            }
        }
    }   
}
