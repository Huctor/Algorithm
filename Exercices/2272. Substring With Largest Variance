https://leetcode.com/problems/substring-with-largest-variance/

Solution: 一维动态规划

class Solution {
    func largestVariance(_ s: String) -> Int {
        
        var result = 0
        var searchArray = [Character]()
        
        for letter in s {
            
            if !searchArray.contains(letter) {
                searchArray.append(letter)
            }
        }
        
        for cLeft in searchArray {
            for cRight in searchArray {
                
                if cLeft != cRight {
                    
                    var nums = [Int]()
                
                    for element in s {
                    
                        if element == cLeft {
                            nums.append(1)
                        }else if element == cRight {
                            nums.append(-1)
                        }
                    
                    }
                    
                    result = max(result, dp(nums))
                }            
            }
        }
                
        return result   
    }
    
    func dp(_ nums: [Int]) -> Int {
        
        var dpLeft = [Int](repeating: 0, count: nums.count)
        var dpRight = [Int](repeating: 0, count: nums.count)
        
        dpLeft[0] = nums[0]
        dpRight[nums.count - 1] = nums[nums.count - 1]
        
        for i in 1 ..< nums.count {
            dpLeft[i] = max(dpLeft[i-1] + nums[i], nums[i])
        }
        
        for i in (0 ..< nums.count - 1).reversed() {
            dpRight[i] = max(dpRight[i + 1] + nums[i], nums[i])
        }
        
        var result = 0
        
        for i in 0 ..< nums.count {
            
            if nums[i] == -1 {
                result = max(result, dpLeft[i] + dpRight[i] - nums[i])
            }

        }
        
        return result
        
    }
}
