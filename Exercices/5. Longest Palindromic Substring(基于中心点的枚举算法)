https://leetcode.com/problems/longest-palindromic-substring/

Solution: 基于中心点的枚举算法

class Solution {
    func longestPalindrome(_ s: String) -> String {
        
        var x = 0
        var y = 0
        var xResult = 0
        var yResult = 0
        var sArray = Array(s)
        var stringResult = ""
        
        for index in 0..<s.count{
    
            (x, y) = isPalindrome(sArray, index, index)
            
            if (y - x) > (yResult - xResult){
                xResult = x
                yResult = y
            }
            
            (x, y) = isPalindrome(sArray, index, index + 1)
            
            if (y - x) > (yResult - xResult){
                xResult = x
                yResult = y
            }
            
        }
        
        print(xResult)
        print(yResult)
        
        for i in xResult..<yResult{
            
            stringResult += String(sArray[i])
        }
        
        return stringResult
        
    }
    
    func isPalindrome(_ s: [Character], _ left: Int, _ right: Int) -> (Int, Int){
        
        var l = left
        var r = right
        
        while l >= 0 && r < s.count{
            
            if s[l] == s[r]{
                
                l -= 1
                r += 1
                continue
            }
            
            break
        }
        
        return (l + 1, r)
        
    }
}
