https://leetcode.com/problems/coin-change/

Solution: 动态规划, 自底向上(bottom up), 先创建长度为amount+1的一维数组[0, -1, -1, -1....-1],然后根据dp[i],求出dp[i+c]

class Solution {
    func coinChange(_ coins: [Int], _ amount: Int) -> Int {
        var dp = [Int](repeating: -1, count: amount + 1)
        dp[0] = 0
        
        for i in 0 ... amount {
            
            if dp[i] == -1 {
                continue
            }

            for c in coins {
                
                if i + c <= amount {
                    
                    if dp[i + c] == -1 {
                        dp[i + c] = dp[i] + 1
                    } else {
                        dp[i + c] = min(dp[i + c], dp[i] + 1)
                    }
                }
                                
            }
        }
        
        return dp[amount]
        
    }
}
