https://leetcode.com/problems/word-ladder/

Solution: BFS算法，关键是建立初始字典

class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if endWord not in wordList:
            return 0
        
        if beginWord in wordList:
            wordList.remove(beginWord)
        
        wordDic = collections.defaultdict(list)
        
        for value in wordList:
            for i in range(len(beginWord)):
                wordDic[value[:i] + '*' + value[i+1:]].append(value)       
                        
        queue = collections.deque([(beginWord, 1)])
            
        visited = set()
        while queue:
            wordValue, distance = queue.popleft()
            if wordValue in visited:
                continue
            else:
                visited.add(wordValue)
            
            for w in range(len(beginWord)):
                wordTmp = wordValue[:w] + '*' + wordValue[w+1:]
                for word in wordDic[wordTmp]:
                    if word == endWord:
                        return distance + 1
                    queue.append((word, distance + 1))
                                        
        return 0
