https://www.lintcode.com/problem/127/

Solution:

"""
class DirectedGraphNode:
     def __init__(self, x):
         self.label = x
         self.neighbors = []
"""

class Solution:
    """
    @param graph: A list of Directed graph node
    @return: Any topological order for the given graph.
    """
    def topSort(self, graph):
        # write your code here

        if not graph:
            return []

        node_indegree = self.get_indegree(graph)
        startNodes = [ x for x in graph if node_indegree[x] == 0]
        queue = collections.deque(startNodes)

        results = []
        
        while queue:
            cur_node = queue.popleft()
            results.append(cur_node)
            for neighbor in cur_node.neighbors:
                node_indegree[neighbor] -= 1
                if node_indegree[neighbor] == 0:
                    queue.append(neighbor)
        
        return results
    
    def get_indegree(self, graph):
        if not graph:
            return []
        node_indegree = {x: 0 for x in graph}

        for node in graph:
            for neighbor in node.neighbors:
                node_indegree[neighbor] += 1

        return node_indegree



