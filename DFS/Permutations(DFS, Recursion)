https://leetcode.com/problems/permutations/

Solution:

class Solution:
    def permute(self, nums: List[int]) -> List[List[int]]:
        
        if not nums:
            return [[]]
        
        results = []
        visited = set()
        
        self.dfs(nums, [], set(), results)
        return results;
    
    def dfs(self, nums: List[int], current_result: List[int], visited: set(), results: List[int]):
        
        if len(current_result) == len(nums):
            results.append(list(current_result))
            return
            
        for num in nums:            
            if num in visited:
                continue
            current_result.append(num)
            visited.add(num)
            self.dfs(nums, current_result, visited, results)
            visited.remove(num)
            current_result.pop()
            
Solution: Swift

class Solution {
    func permute(_ nums: [Int]) -> [[Int]] {
        
        if nums.count == 0{
            return []
        }
        
        var results = [[Int]]()
        var currentLevel = [Int]()
        var listSet = Set<Int>()
        
        dfs(nums, &listSet, &currentLevel, &results)      
        
        return results
        
    }
    
    func dfs(_ nums: [Int], _ listSet: inout Set<Int>, _ currentLevel: inout [Int], _ results:inout [[Int]]){

        if currentLevel.count == nums.count{
            results.append(currentLevel)
            return
        }
        
        for value in nums{
            if !listSet.contains(value){
                listSet.insert(value)
                currentLevel.append(value)
                dfs(nums, &listSet, &currentLevel, &results)
                currentLevel.removeLast()
                listSet.remove(value)
            }
        }
    }
}
